name: Build and Push All Services

on:
  push:
    branches: [ release ]
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to build (all, order, inventory, notification, frontend)'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - order
        - inventory
        - notification
        - frontend

jobs:
  build-order-service:
    if: github.event.inputs.service == 'order' || github.event.inputs.service == 'all' || contains(github.event.head_commit.modified, 'order-service/')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Validate requirements
      run: |
        echo "üîç Validating requirements.txt..."
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt --dry-run || (echo "‚ùå Requirements validation failed" && exit 1)
        echo "‚úÖ Requirements validation passed"
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push Order Service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./order-service/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/microservices-order-service:latest,${{ secrets.DOCKERHUB_USERNAME }}/microservices-order-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-inventory-service:
    if: github.event.inputs.service == 'inventory' || github.event.inputs.service == 'all' || contains(github.event.head_commit.modified, 'inventory-service/')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Validate requirements
      run: |
        echo "üîç Validating requirements.txt..."
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt --dry-run || (echo "‚ùå Requirements validation failed" && exit 1)
        echo "‚úÖ Requirements validation passed"
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push Inventory Service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./inventory-service/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/microservices-inventory-service:latest,${{ secrets.DOCKERHUB_USERNAME }}/microservices-inventory-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-notification-service:
    if: github.event.inputs.service == 'notification' || github.event.inputs.service == 'all' || contains(github.event.head_commit.modified, 'notification-service/')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Validate requirements
      run: |
        echo "üîç Validating requirements.txt..."
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt --dry-run || (echo "‚ùå Requirements validation failed" && exit 1)
        echo "‚úÖ Requirements validation passed"
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push Notification Service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./notification-service/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/microservices-notification-service:latest,${{ secrets.DOCKERHUB_USERNAME }}/microservices-notification-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-frontend:
    if: github.event.inputs.service == 'frontend' || github.event.inputs.service == 'all' || contains(github.event.head_commit.modified, 'frontend/')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/microservices-frontend:latest,${{ secrets.DOCKERHUB_USERNAME }}/microservices-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  test-integration:
    needs: [build-order-service, build-inventory-service, build-notification-service, build-frontend]
    if: always() && (needs.build-order-service.result == 'success' || needs.build-order-service.result == 'skipped') && (needs.build-inventory-service.result == 'success' || needs.build-inventory-service.result == 'skipped') && (needs.build-notification-service.result == 'success' || needs.build-notification-service.result == 'skipped') && (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Test integration
      run: |
        echo "üß™ Testing integration of built services..."
        echo "‚úÖ All services built successfully"
        echo "üì¶ Docker Hub Images:"
        echo "   - ${{ secrets.DOCKERHUB_USERNAME }}/microservices-order-service:latest"
        echo "   - ${{ secrets.DOCKERHUB_USERNAME }}/microservices-inventory-service:latest"
        echo "   - ${{ secrets.DOCKERHUB_USERNAME }}/microservices-notification-service:latest"
        echo "   - ${{ secrets.DOCKERHUB_USERNAME }}/microservices-frontend:latest"

  notify-success:
    needs: [test-integration]
    if: success()
    runs-on: ubuntu-latest
    steps:
    - name: Notify success
      run: |
        echo "üéâ All microservices successfully built and pushed to Docker Hub!"
        echo "üöÄ Ready for deployment" 